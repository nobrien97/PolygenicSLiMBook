/* Quantitative simulation for a single polygenic trait
 (C) Nick O'Brien and OB Lab, University of Queensland, Australia
 Here we consider a single trait evolving through time with a wealth of parameters to play with.
 Options exist for drift, stabilising selection, and directional selection
*/


// set up a simple neutral simulation
initialize() {
	if (!exists("slimgui")) {
		setCfgParam("seed", getSeed());
	}
	else {
		setSeed(asInteger(round(runif(1, 1, 2^62 - 1))));
		setCfgParam("seed", getSeed());
		catn("Actual seed: " + asInteger(seed));
	}
	
	
	// Declare/define parameters if they haven't been by the command line arguments
	// Values from literature are cited
	// The realistic range of w^2 is 3-50, so 18 to 5000 for 2w^2, or 0.05556 to 0.0002 for 1/2w^2
	setCfgParam("mu", 8.045e-6); // Mutation rate averaged across five species from Table 1 Aston et al. 2017 
	setCfgParam("Ne", 1000 ); // Population size
	setCfgParam("del_mean", -1); // Mean used for the gamma distribution that deleterious mutations are pulled from
	setCfgParam("del_shape", 3); // Shape parameter for gamma distribution used for deleterious mutations
	setCfgParam("mutWeights", c(3, 2, 1)); // Relative proportions of Neutral/Deleterious/QTL mutations occurring at each site.
	setCfgParam("rwide", 1.241e-4); // Whole genome recombination rate (per locus)
	setCfgParam("nloci", 66); // Number of QTL positions along the chromosome - where QTL mutations can appear, sampled from sample(): Fixed at 100
	setCfgParam("genomelength", 99); // Loci across the genome - some are deleterious, others QTL, others neutral
	setCfgParam("locimu", 0.0); // Mean used for QTL mutation effect distribution pulls
	setCfgParam("locisigma", 1.0); // Variance used for QTL effect pulls - the additive effect size distribution
	setCfgParam("locidist", "n"); // Distribution used for locus distribution. "n" = normal, "g" = gamma
	setCfgParam("width", 0.005); // Width of the fitness curve: smaller = wider curve, lower selection pressure: need to be careful with values, they need to be relative to the mean phenotype after burn-in, and the initial distance from the optimum. This should be precalculated as 1/2w^2, as in Lande 1976. Only valid for stabilising selection models
	setCfgParam("opt", 15); // How far away optimum phenotype should be from mean phenotype post-burnin: Kingsolver et al. 2001 suggests .01 to 10 phenotypic units
	setCfgParam("selType", "s"); // Which type of selection to use: "s" = stabilising, "p" = positive/directional, "d" = genetic drift
	setCfgParam("printH", F); // Print values of heterozygosity over time during burn-in: used to decide how long burn-in needs to be
	setCfgParam("burnTime", 25000); // Number of generations of neutral burn-in before the test period
	setCfgParam("testTime", 10000); // Number of generations of test time: where selection is applied (or additional generations of drift, if selType = "d")
	setCfgParam("samplerate", c(500, 25000)); // Sample rate in generations for phenotypic output (first value) and allelic output (second value)
	
	setCfgParam("outpositions", 'out_slim1T_pos.csv'); // Output filename/path for locus positions
	setCfgParam("outburn", 'out_slim1T_burnin.csv'); // Output burn-in heterozygosities
	setCfgParam("outname", 'out_slim1T_means.csv'); // Output filename/path for the trait means/variance
	setCfgParam("outopt", 'out_slim1T_opt.csv'); // Output filename/path for the trait optimum values for each run
	setCfgParam("outnamemuts", 'out_slim1T_muts.csv'); //Output filename/path for the mutation information
	
	setCfgParam("modelindex", 1); // Identifier for the combination of predictors used in Latin Hypercube: this is the row number in the lscombos.csv file
	
	initializeMutationRate(mu);
	
	initializeMutationType("m1", 0.5, "f", 0.0); // Neutral, non-trait-affecting mutations: also a place-holder for all mutation types before we set them
	
	//m2 mutation type: deleterious/background selection
	initializeMutationType("m2", 0.5, "g", del_mean, del_shape);  // del_mean and del_shape are defined in the batch run script, or the cfg parameters
	m2.color = "red";
	
	//m3 mutation type: QTL mutation
	initializeMutationType("m3", 0.5, locidist, locimu, locisigma);
	m3.color = "green";
	
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, genomelength-1);
	initializeRecombinationRate(rwide);
	
	
	
}


// Function definitions

function (void) setCfgParam(s$ name, ifls value) {
	// Automate defining constants for SLiMgui and slim command line - if we haven't defined it in the command line, set it here

	if (!exists(name)) {
		defineConstant(name, value);
	}
}


function (void) calcPhenotype(o<Individual> inds, o<Substitution> fixed) {
	// Calculate phenotypes for individuals based on their QTL effects - both segregating and substitutions

	sizem3 = size(fixed[fixed.mutationType == m3]);
	fixedfx = sizem3 ? sum(fixed[fixed.mutationType == m3].selectionCoeff) else 0.0;
	
	for (ind in inds) {
		muts = ind.genomes.mutationsOfType(m3);			// Get only trait effects
		mutscount = size(muts);
		
		phenotype = (mutscount ? sum(muts.selectionCoeff) else 0.0);
		phenotype = phenotype + fixedfx; // add fixed effects
		ind.setValue("phenotype", phenotype);
	}
}

function (void) calcFitnessStab(o<Individual> inds) {
	// Calculate fitness from phenotype. Make sure this is only called after CalcPhenotype() and after sim.setValue("optimum")!
	// We choose the fitness function based on the cfgParam selType, which activates/deactivates script blocks
	phenotypes = inds.getValue("phenotype"); 
	dists = phenotypes - sim.getValue("optimum");
	// https://www.desmos.com/calculator/yelcak6wfo
	inds.fitnessScaling = 0.01 + exp(-(dists^2) * width); // Fitness function comes from Lande 1976: width is 1/2w^2
}


function (void) calcFitnessDir(o<Individual> inds) {
	// Calculate fitness from phenotype. Make sure this is only called after CalcPhenotype() and after sim.setValue("optimum")!
	// We choose the fitness function based on the cfgParam selType, which activates/deactivates script blocks
	phenotypes = inds.getValue("phenotype"); 
	inds.fitnessScaling = phenotypes;

}


// create a population of Ne individuals
// Drosophila - deleterious mutation rate: Peter Keightley Eyre-Walker: with Ne estimate and genome size
// Good estimate of how many deleterious mutations occur per site and gen, and distribution of effects
1 {
	sim.addSubpop("p1", Ne);
	
	
	// Define locations of QTLs, deleterious loci, and neutral loci
	lengthvec = 0:(genomelength - 1);
	pos_QTL = sample(lengthvec, nloci); // Set the positions of our QTLs, from position 1 to the length of the chromosome;
	
	
	sim.setValue("pos_QTL", pos_QTL); //store these positions in a sim value
	
	posfile = paste(modelindex, asString(seed), nloci, pos_QTL, sep = ","); // Output information on where the QTLs are, and the recombination structure of the genome
	
	writeFile(outpositions, posfile, append = T);
	
	
	
	// Define constants for plotting heterozygosity (diagnostics)
	if (printH == T) {
		sim.setValue("h2_history", NULL);
		defineConstant("pngPath", writeTempFile("plot_", ".png", ""));
		if (exists("slimgui"))
			slimgui.openDocument(pngPath);
		}	
	

	
	
	// Activate burn-in time
	
	sim.rescheduleScriptBlock(s1, start = 1, end = burnTime);
	
	// Activate the right post-burnin script block depending on selType parameter: s1 = burnin s2 = mutation output s3, s4, s5 = stab sel, dir sel, drift
	if (selType == "p") {
		sim.deregisterScriptBlock(s3);
		sim.deregisterScriptBlock(s5);
		sim.rescheduleScriptBlock(s4, start = (burnTime + 1), end = (burnTime + testTime));
		}
	else if (selType == "d") {
		sim.deregisterScriptBlock(s3);
		sim.deregisterScriptBlock(s4);
		sim.rescheduleScriptBlock(s5, start = (burnTime + 1), end = (burnTime + testTime));

		}
	else {
		sim.deregisterScriptBlock(s4);
		sim.deregisterScriptBlock(s5);
		sim.rescheduleScriptBlock(s3, start = (burnTime + 1), end = (burnTime + testTime));

	}
}

// Mutations individually have no direct fitness effect, fitness is calculated on a trait basis
fitness(m3) {
	return 1.0;
}


// When a mutation appears, need to check if it occurs at a QTL and set the mutation type accordingly
mutation(m1) {

	if (any(mut.position == sim.getValue("pos_QTL"))) {
		choice = sample(sim.mutationTypes, 1, weights = mutWeights);
	}
	else {
		choice = sample(sim.mutationTypes[0:1], 1, weights = mutWeights[0:1]);
	}
	mut.setMutationType(choice);
	mut.setSelectionCoeff(mut.mutationType.drawSelectionCoefficient());	

	return T;
}

// Burn-in period
s1 2 late() {
	if (sim.generation % samplerate[0] != 0) // Grab a sample every x generations
		return;
	inds = sim.subpopulations.individuals;
	meanH = paste(calcHeterozygosity(inds.genomes), sep=",");
	VA = paste(calcVA(inds, sim.mutationTypes[2]));	
	calcPhenotype(inds, sim.substitutions);
	phenomean = mean(inds.getValue("phenotype"));
	Bfile = paste(sim.generation, asString(seed), modelindex, meanH, VA, phenomean, sep=",");
	writeFile(outburn, Bfile, append = T);	
	
	// Set the optimum as a fixed distance from post-burn-in population phenotype mean
	if (sim.generation == burnTime & selType == "s") {
		if (abs(phenomean) == phenomean)
			optimum = opt + phenomean; // Change this to take into account negative starting values
		else 
			optimum = opt - phenomean;
			
		catn("Optimum is: " + optimum);
		sim.setValue("optimum", optimum);
		OptFile = paste(asString(seed), modelindex, optimum, sep = ",");
		writeFile(outopt, OptFile);
	}	
	
	// Plotting heterozygosity: check operating system so we use the right R functions to draw the graph
	if (printH == T)  {
		sim.setValue("h2_history", c(sim.getValue("h2_history"), meanH));
		catn("Heterozygosity = " + meanH);
		y = sim.getValue("h2_history");
		bounds = c(min(asFloat(y)) - (0.1*min(asFloat(y))), max(asFloat(y)) + (0.1*max(asFloat(y))));

		rstr = paste('{',
					'x <- (1:' + size(y) + ') * ' + samplerate[0],
					'y <- c(' + paste(y, sep = ", ") + ')',
					'png(width = 4, height = 4, units = "in", res = 72, file = "' + pngPath + '")',
					'plot(x=x, y=y, xlim = c(0, ' + burnTime + '), ylim = c(' + paste(bounds, sep = ", ") + '), type = "l",',
						'xlab = "Generation", ylab = "Heterozygosity")',
					'box()',
					'dev.off()',
					'}', sep = "\n");
			scriptPath = writeTempFile("plot_", ".R", rstr);
			system("/usr/bin/Rscript", args = scriptPath);	
			deleteFile(scriptPath);

		}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////	
// Allelic output: outputting effect sizes, types, frequencies etc.
///////////////////////////////////////////////////////////////////////////////////////////////////////

s2 2 late() {

	// Every y generations: we can do it more often probably, but testing required	
	if (sim.generation % samplerate[1] != 0)
		return;
	
	
	// Store vectors of unique mutations, sorted by the generation in which they originated
	muts = sortBy(c(sim.mutations[sim.mutations.mutationType != m1]), "originGeneration");
	
	// same for substitutions
	subs = sortBy(c(sim.substitutions[sim.substitutions.mutationType != m1]), "originGeneration");
	
	// Set up an empty output to store all our mutations' information for this generation
	mutsLines = NULL;
		
	// Put information on these unique mutations into a separate mutations file	
	
	// Check if there are any substitutions, if not we need to fix the output lines	by not including the \n character at the end of the last mutation line. 
	// This is because writeFile() automatically adds a \n character, so we'd end up with an extra empty line if we do write that way
	
	
	for (mut in muts) {
		mutFreq = mean(sim.subpopulations.genomes.containsMutations(mut));
		mutType = mut.mutationType.id;
		mutValue = asString(mut.selectionCoeff);
		mutFit = mut.selectionCoeff * (mut.mutationType.id == 2) + mutValue;
		
		// Look into array operators to remove these if/else statements	
		
		if (size(subs)) {
			mutsLine = paste(sim.generation, asString(seed), modelindex, mutType, mut.id, mut.position, mut.originGeneration, mutValue, mutFreq, "N/A", sep = ",");
			mutsLine = paste0(mutsLine, "\n");
			mutsLines = paste0(mutsLines, mutsLine);
		}

		else {
			if (mut != muts[muts.size() - 1]) { // If there are no substitutions and we're on the last mutation, add a new line character, otherwise don't
				mutsLine = paste(sim.generation, asString(seed), modelindex, mutType, mut.id, mut.position, mut.originGeneration, mutValue, mutFreq, "N/A", sep = ",");
				mutsLine = paste0(mutsLine, "\n");
				}
				
			else {
				mutsLine = paste(sim.generation, asString(seed), modelindex, mutType, mut.id, mut.position, mut.originGeneration, mutValue, mutFreq, "N/A", sep = ",");
				mutsLine = paste0(mutsLine, ""); // Unsure if necessary, but givent hat \n is a character we should keep char length consistent
				}

			mutsLines = paste0(mutsLines, mutsLine);
		}
	}
	
	
	
	for (sub in subs) {
		subFreq = 1.0;
		subType = sub.mutationType.id;
		subValue = asString(sub.selectionCoeff);
		
		// Look into array operators to remove these if/else statements
		
		if (sub != subs[subs.size() - 1]) {
			subLine = paste(sim.generation, asString(seed), modelindex, subType, sub.id, sub.position, sub.originGeneration, subValue, subFreq, sub.fixationGeneration, sep = ",");
			subLine = paste0(subLine, "\n");
			}
			
		else {
			subLine = paste(sim.generation, asString(seed), modelindex, subType, sub.id, sub.position, sub.originGeneration, subValue, subFreq, sub.fixationGeneration, sep = ",");
			subLine = paste0(subLine, "");
			}

		mutsLines = paste0(mutsLines, subLine); // Add substitutions to mutation output
	
	}
	
	
	// Write the mutations file
	// Fail safe in case there are no mutations at some point and the for loop doesn't run
	if (exists('mutsLine') | exists('subLine'))
		writeFile(outnamemuts, mutsLines, append = T);

}



// Selection period

// Stabilising selection

s3 3 late() {
		
	// Calculate phenotypes + fitness, write output
	inds = sim.subpopulations.individuals;
	calcPhenotype(inds, sim.substitutions);
	calcFitnessStab(inds);

	if (sim.generation % samplerate[0] == 0) { // Write output every x gens
		meanH = paste(calcHeterozygosity(p1.genomes), sep=",");
		VA = paste(calcVA(p1.individuals, sim.mutationTypes[2]));
		phenotypes = inds.getValue("phenotype");
		phenomean = mean(phenotypes);
		w = mean(inds.fitnessScaling);
		dist = mean(abs(phenotypes - sim.getValue("optimum"))); // Absolute values so that means aren't biased towards 0 by drift 
		Mfile = paste(sim.generation, asString(seed), modelindex, meanH, VA, phenomean, dist, w, sep=",");
		writeFile(outname, Mfile, append = T);
	}
	
	
}

// Directional selection

s4 3 late() {
		
	// Calculate phenotypes + fitness, write output
	inds = sim.subpopulations.individuals;
	calcPhenotype(inds, sim.substitutions);
	calcFitnessDir(inds);

	if (sim.generation % samplerate[0] == 0) { // Write output every x gens
		meanH = paste(calcHeterozygosity(p1.genomes), sep=",");
		VA = paste(calcVA(p1.individuals, sim.mutationTypes[2]));
		phenotypes = inds.getValue("phenotype");
		phenomean = mean(phenotypes);
		w = mean(inds.fitnessScaling);
		Mfile = paste(sim.generation, asString(seed), modelindex, meanH, VA, phenomean, w, sep=",");
		writeFile(outname, Mfile, append = T);
	}
	
}



// More drift instead of selection: still keeping track of phenotypes

s5 3 late() {
		
	// Calculate phenotypes + fitness, write output
	inds = sim.subpopulations.individuals;
	calcPhenotype(inds, sim.substitutions);

	if (sim.generation % samplerate[0] == 0) { // Write output every x gens
		meanH = paste(calcHeterozygosity(p1.genomes), sep=",");
		VA = paste(calcVA(p1.individuals, sim.mutationTypes[2]));
		phenotypes = inds.getValue("phenotype");
		phenomean = mean(phenotypes);
		Mfile = paste(sim.generation, asString(seed), modelindex, meanH, VA, phenomean, sep=",");
		writeFile(outname, Mfile, append = T);
	}
	
	
}


